/*
 * generated by Xtext 2.12.0
 */
package uk.ac.kcl.inf.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import uk.ac.kcl.inf.xDsmlCompose.ClassMapping
import uk.ac.kcl.inf.xDsmlCompose.GTSMapping
import uk.ac.kcl.inf.xDsmlCompose.ReferenceMapping

@RunWith(XtextRunner)
@InjectWith(XDsmlComposeInjectorProvider)
class XDsmlComposeParsingTest {
	@Inject
	ParseHelper<GTSMapping> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			map {
				type_mapping from "server.ecore" to "DEVSMM.ecore" {
					class server.Server => devsmm.Machine
					reference server.Server.Out => devsmm.Machine.out
				}
			}
		''')
		Assert.assertNotNull("Did not produce parse result", result)
		Assert.assertTrue("Found parse errors: " + result.eResource.errors, result.eResource.errors.isEmpty)
		Assert.assertNotNull("No type mapping", result.typeMapping)
		Assert.assertNotNull("Did not load source class", (result.typeMapping.mappings.head as ClassMapping).source.name)
		Assert.assertNotNull("Did not load target class", (result.typeMapping.mappings.head as ClassMapping).target.name)
		Assert.assertNotNull("Did not load source reference", (result.typeMapping.mappings.get(1) as ReferenceMapping).source.name)
		Assert.assertNotNull("Did not load target reference", (result.typeMapping.mappings.get(1) as ReferenceMapping).target.name)
	}
}
