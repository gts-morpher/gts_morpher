/*
 * generated by Xtext 2.12.0
 */
package uk.ac.kcl.inf.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import uk.ac.kcl.inf.xDsmlCompose.ClassMapping
import uk.ac.kcl.inf.xDsmlCompose.GTSMapping
import uk.ac.kcl.inf.xDsmlCompose.ReferenceMapping
import org.eclipse.xtext.resource.XtextResourceSet
import com.google.inject.Provider
import org.eclipse.emf.common.util.URI

@RunWith(XtextRunner)
@InjectWith(XDsmlComposeInjectorProvider)
class XDsmlComposeParsingTest {
	@Inject
	ParseHelper<GTSMapping> parseHelper
	
	@Inject
	private Provider<XtextResourceSet> resourceSetProvider;
	
	@Test
	def void loadModel() {
		val resourceSet = resourceSetProvider.get
		val serverURI = URI.createFileURI(XDsmlComposeParsingTest.getResource("server.ecore").path)
		resourceSet.getResource(serverURI, true)
		val devsmmURI = URI.createFileURI(XDsmlComposeParsingTest.getResource("DEVSMM.ecore").path)
		resourceSet.getResource(devsmmURI, true)
		// TODO At some point may want to change this so it works with actual URLs rather than relying on Xtext/Ecore to pick up and search all the available ecore files
		// Then would use «serverURI.toString» etc. below
		val result = parseHelper.parse('''
				map {
					type_mapping from "server" to "devsmm" {
						class server.Server => devsmm.Machine
						reference server.Server.Out => devsmm.Machine.out
					}
				}
			''',
			resourceSet)
		Assert.assertNotNull("Did not produce parse result", result)
		Assert.assertTrue("Found parse errors: " + result.eResource.errors, result.eResource.errors.isEmpty)

		Assert.assertNotNull("No type mapping", result.typeMapping)

		Assert.assertNotNull("Did not load source package", result.typeMapping.source.name)
		Assert.assertNotNull("Did not load target package", result.typeMapping.target.name)

		Assert.assertNotNull("Did not load source class", (result.typeMapping.mappings.head as ClassMapping).source.name)
		Assert.assertNotNull("Did not load target class", (result.typeMapping.mappings.head as ClassMapping).target.name)

		Assert.assertNotNull("Did not load source reference", (result.typeMapping.mappings.get(1) as ReferenceMapping).source.name)
		Assert.assertNotNull("Did not load target reference", (result.typeMapping.mappings.get(1) as ReferenceMapping).target.name)
	}
}
