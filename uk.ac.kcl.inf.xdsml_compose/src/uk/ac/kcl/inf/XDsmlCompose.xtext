grammar uk.ac.kcl.inf.XDsmlCompose with org.eclipse.xtext.common.Terminals

generate xDsmlCompose "http://www.ac.uk/kcl/inf/XDsmlCompose"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2011/Henshin" as gts

GTSSpecificationModule:
	(
		gtss += GTSSpecification |
		gts_families += GTSFamilySpecification |
		mappings += GTSMapping
	)*
;

GTSMapping:
	(autoComplete ?= "auto-complete" (uniqueCompletion ?= "unique")?
		                             (allowFromEmtpy?="allow-from-empty")? 
		                             ((withoutToVirtual ?= "without-to-virtual")|(toIdentityOnly?="to-identity-only"))?)? 
	"map" (name = ID)? "{"
		"from" source = GTSSpecificationOrReference
		"to" target = GTSSpecificationOrReference 
	 
		typeMapping = TypeGraphMapping
		(behaviourMapping = BehaviourMapping)?
	"}"
;

GTSFamilySpecification:
	("gts_family" name=ID)? "{"
		root_gts = GTSSpecificationOrReference
		
		"transformers" ":" transformers = [gts::Module | STRING]
	"}"
;

GTSSpecificationOrReference:
	GTSSpecification | 
	GTSReference
;

GTSReference:
	ref = [GTSSpecification]
;

GTSSpecification:
	((export ?= "export")? "gts" (name=ID)?)?
	(interface_mapping ?= "interface_of")?
	"{"
		gts = GTSSelection	
	"}"
;

GTSSelection:
	GTSLiteral |
	GTSFamilyChoice |
	GTSReference |
	GTSWeave
;

GTSLiteral:
	"metamodel" ":" metamodel = [ecore::EPackage | STRING]
	("behaviour" ":" behaviour = [gts::Module | STRING])?
;

//GTSFamilyChoice:
//	"family" ":" "{"
//		root = GTSLiteral
//		"transformers" ":" transformers = [gts::Module | STRING]
//	"}"
//	
//	"using" "["
//		transformationSteps = UnitCallList
//	"]"
//;
GTSFamilyChoice:
	"family" ":" family = GTSFamilySpecificationOrReference
	
	"using" "["
		transformationSteps = UnitCallList
	"]"
;

GTSFamilySpecificationOrReference:
	GTSFamilySpecification | 
	GTSFamilyReference
;

GTSFamilyReference:
	ref = [GTSFamilySpecification]
;

GTSWeave:
	"weave" ":" "{"
		"map1" ":" mapping1 = GTSMappingRefOrInterfaceSpec
		"map2" ":" mapping2 = GTSMappingRefOrInterfaceSpec
	"}"
;

GTSMappingRefOrInterfaceSpec:
	GTSMappingRef |
	GTSMappingInterfaceSpec
;

GTSMappingRef:
	ref = [GTSMapping]
;

// TODO: Eventually, want to generalise this so that these can all be named and used wherever a mapping can
GTSMappingInterfaceSpec:
	"interface_of" "(" gts_ref=[GTSSpecification] ")"
;

UnitCallList:
	steps += UnitCall ("," steps += UnitCall)*
;

UnitCall:
  unit = [gts::Unit | ID] "(" (params = UnitParameterList)? ")"
;

UnitParameterList:
	parameters += UnitParameter ("," parameters += UnitParameter)*
;

UnitParameter:
	EObjectReferenceParameter | StringParameter | NumericParameter
;

EObjectReferenceParameter:
	qualifiedName = QualifiedName
;

StringParameter:
	value = STRING
;

NumericParameter:
	value = INT
;

TypeGraphMapping: 
	"type_mapping" "{" {TypeGraphMapping}
		mappings += TypeMapping*
	"}"
;

TypeMapping:
	ClassMapping | ReferenceMapping | AttributeMapping
;

ClassMapping:
	"class" source = [ecore::EClassifier | QualifiedName] "=>" target = [ecore::EClassifier | QualifiedName]
;

ReferenceMapping:
	"reference" source = [ecore::EReference | QualifiedName] "=>" target = [ecore::EReference | QualifiedName]
;

AttributeMapping:
	"attribute" source = [ecore::EAttribute | QualifiedName] "=>" target = [ecore::EAttribute | QualifiedName]
;

BehaviourMapping:
	"behaviour_mapping" "{"
		mappings += RuleMapping+
	"}"
;

RuleMapping:
	"rule" 
		(
			(source_empty?="empty" "to" target=[gts::Rule | ID]) 
			|
			(source=[gts::Rule | ID] "to" ((target_virtual?="virtual" (target_identity?="identity")?) | (target=[gts::Rule | ID] "{"
				element_mappings += RuleElementMapping*
			"}")))
		)
;

RuleElementMapping:
	ObjectMapping | LinkMapping | SlotMapping
;

ObjectMapping:
	"object" source = [gts::Node | ID] "=>" target = [gts::Node | ID]
;

LinkMapping:
	"link" source = [gts::Edge | LinkName] "=>" target = [gts::Edge | LinkName]
;

SlotMapping:
	"slot" source = [gts::Attribute | QualifiedName] "=>" target = [gts::Attribute | QualifiedName]
;

LinkName :
	"[" ID "->" ID ":" ID "]"
;

QualifiedName:
	ID ('.' ID)*
;

@Override 
terminal INT returns ecore::EInt: '-'?('0'..'9')+;
