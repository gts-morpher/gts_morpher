grammar uk.ac.kcl.inf.XDsmlCompose with org.eclipse.xtext.common.Terminals

generate xDsmlCompose "http://www.ac.uk/kcl/inf/XDsmlCompose"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2011/Henshin" as gts

GTSMapping:
	(autoComplete ?= "auto-complete" (uniqueCompletion ?= "unique")? 
		                             ((withoutToVirtual ?= "without-to-virtual")|(toIdentityOnly?="to-identity-only"))?)? 
		                             "map" "{"
		"from" source = GTSSpecification
		"to" target = GTSSpecification 
	 
		typeMapping = TypeGraphMapping
		(behaviourMapping = BehaviourMapping)?
	"}"
;

GTSSpecification:
	(interface_mapping ?= "interface_of")?
	"{"
		gts = GTSSelection	
	"}"
;

GTSSelection:
	GTSLiteral |
	GTSFamilyChoice
;

GTSLiteral:
	"metamodel" ":" metamodel = [ecore::EPackage | STRING]
	("behaviour" ":" behaviour = [gts::Module | STRING])?
;

GTSFamilyChoice:
	"family" ":" "{"
		root = GTSLiteral
		"transformers" ":" transformers = [gts::Module | STRING]
	"}"
	
	"using" "["
		transformationSteps = UnitCallList
	"]"
;

UnitCallList:
	steps += UnitCall ("," steps += UnitCall)*
;

UnitCall:
  unit = [gts::Unit | ID] "(" (params = UnitParameterList)? ")"
;

UnitParameterList:
	parameters += UnitParameter ("," parameters += UnitParameter)*
;

UnitParameter:
	EObjectReferenceParameter | StringParameter | NumericParameter
;

EObjectReferenceParameter:
	qualifiedName = QualifiedName
;

StringParameter:
	value = STRING
;

NumericParameter:
	value = INT
;

TypeGraphMapping: 
	"type_mapping" "{" {TypeGraphMapping}
		mappings += TypeMapping*
	"}"
;

TypeMapping:
	ClassMapping | ReferenceMapping | AttributeMapping
;

ClassMapping:
	"class" source = [ecore::EClassifier | QualifiedName] "=>" target = [ecore::EClassifier | QualifiedName]
;

ReferenceMapping:
	"reference" source = [ecore::EReference | QualifiedName] "=>" target = [ecore::EReference | QualifiedName]
;

AttributeMapping:
	"attribute" source = [ecore::EAttribute | QualifiedName] "=>" target = [ecore::EAttribute | QualifiedName]
;

BehaviourMapping:
	"behaviour_mapping" "{"
		mappings += RuleMapping+
	"}"
;

RuleMapping:
	"rule" source=[gts::Rule | ID] "to" ((target_virtual?="virtual" (target_identity?="identity")?) | (target=[gts::Rule | ID] "{"
		element_mappings += RuleElementMapping*
	"}"))
;

RuleElementMapping:
	ObjectMapping | LinkMapping | SlotMapping
;

ObjectMapping:
	"object" source = [gts::Node | ID] "=>" target = [gts::Node | ID]
;

LinkMapping:
	"link" source = [gts::Edge | LinkName] "=>" target = [gts::Edge | LinkName]
;

SlotMapping:
	"slot" source = [gts::Attribute | QualifiedName] "=>" target = [gts::Attribute | QualifiedName]
;

LinkName :
	"[" ID "->" ID ":" ID "]"
;

QualifiedName:
	ID ('.' ID)*
;

@Override 
terminal INT returns ecore::EInt: '-'?('0'..'9')+;
