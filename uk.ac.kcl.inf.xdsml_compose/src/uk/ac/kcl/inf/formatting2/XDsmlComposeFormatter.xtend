/*
 * generated by Xtext 2.12.0
 */
package uk.ac.kcl.inf.formatting2

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import uk.ac.kcl.inf.services.XDsmlComposeGrammarAccess
import uk.ac.kcl.inf.xDsmlCompose.GTSLiteral
import uk.ac.kcl.inf.xDsmlCompose.GTSMapping
import uk.ac.kcl.inf.xDsmlCompose.GTSSpecification
import uk.ac.kcl.inf.xDsmlCompose.TypeGraphMapping
import uk.ac.kcl.inf.xDsmlCompose.TypeMapping

class XDsmlComposeFormatter extends AbstractFormatter2 {
	
	@Inject extension XDsmlComposeGrammarAccess

	def dispatch void format(GTSMapping mapping, extension IFormattableDocument document) {
		mapping.regionFor.keyword("auto-complete").append[oneSpace]
		mapping.regionFor.keyword("unique").append[oneSpace]
		mapping.regionFor.keyword("map").append[oneSpace]
		
		mapping.blockIndent(document)
		
		mapping.regionFor.keyword("from").append[oneSpace]
		mapping.regionFor.keyword("to").append[oneSpace]
		
		mapping.source.format
		mapping.source.append[newLines = 2]
		
		mapping.target.format
		mapping.target.append[newLines = 2]
		
		mapping.typeMapping.format
		if (mapping.behaviourMapping !== null) {
			mapping.typeMapping.append[newLines = 2]
		}
		
		mapping.behaviourMapping.format			
	}

	def dispatch void format(GTSSpecification gts, extension IFormattableDocument document) {
		gts.regionFor.keyword("interface_of").append[oneSpace]
		
		gts.blockIndent(document)

		gts.gts.format
	}
	
	def dispatch void format(GTSLiteral gts, extension IFormattableDocument document) {
		gts.regionFor.keyword(":").append[oneSpace]
		gts.regionFor.keyword("behaviour").prepend[newLine]
	}
	
	def dispatch void format(TypeGraphMapping mapping, extension IFormattableDocument document) {
		mapping.regionFor.keyword("type_mapping").append[oneSpace]
		mapping.blockIndent(document)
		mapping.mappings.forEach[m | 
			m.format
			m.append[newLine]
		]
	}
	
	def dispatch void format(TypeMapping mapping, extension IFormattableDocument document) {
		mapping.regionFor.keywords("class", "reference", "attribute").forEach[k | k.append[oneSpace]]
		mapping.regionFor.keyword("=>").surround[oneSpace]
	}
	
	private def blockIndent(EObject object, extension IFormattableDocument document) {
		interior(
			object.regionFor.keyword("{").append[newLine],
			object.regionFor.keyword("}").prepend[newLine],
			[indent]
		)		
	}
}
