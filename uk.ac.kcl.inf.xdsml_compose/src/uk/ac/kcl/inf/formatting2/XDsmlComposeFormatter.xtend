/*
 * generated by Xtext 2.12.0
 */
package uk.ac.kcl.inf.formatting2

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import uk.ac.kcl.inf.services.XDsmlComposeGrammarAccess
import uk.ac.kcl.inf.xDsmlCompose.BehaviourMapping
import uk.ac.kcl.inf.xDsmlCompose.GTSFamilyChoice
import uk.ac.kcl.inf.xDsmlCompose.GTSLiteral
import uk.ac.kcl.inf.xDsmlCompose.GTSMapping
import uk.ac.kcl.inf.xDsmlCompose.GTSMappingRef
import uk.ac.kcl.inf.xDsmlCompose.GTSReference
import uk.ac.kcl.inf.xDsmlCompose.GTSSpecification
import uk.ac.kcl.inf.xDsmlCompose.GTSSpecificationModule
import uk.ac.kcl.inf.xDsmlCompose.GTSSpecificationOrReference
import uk.ac.kcl.inf.xDsmlCompose.GTSWeave
import uk.ac.kcl.inf.xDsmlCompose.RuleElementMapping
import uk.ac.kcl.inf.xDsmlCompose.RuleMapping
import uk.ac.kcl.inf.xDsmlCompose.TypeGraphMapping
import uk.ac.kcl.inf.xDsmlCompose.TypeMapping
import uk.ac.kcl.inf.xDsmlCompose.UnitCall
import uk.ac.kcl.inf.xDsmlCompose.UnitCallList
import uk.ac.kcl.inf.xDsmlCompose.UnitParameterList
import uk.ac.kcl.inf.xDsmlCompose.XDsmlComposePackage
import uk.ac.kcl.inf.xDsmlCompose.GTSMappingInterfaceSpec

import static extension uk.ac.kcl.inf.util.GTSSpecificationHelper.*
import uk.ac.kcl.inf.xDsmlCompose.GTSFamilySpecification

class XDsmlComposeFormatter extends AbstractFormatter2 {
	
	@Inject extension XDsmlComposeGrammarAccess

	def dispatch void format(GTSMapping mapping, extension IFormattableDocument document) {
		mapping.regionFor.keyword("auto-complete").append[oneSpace]
		mapping.regionFor.keyword("unique").surround[oneSpace]
		mapping.regionFor.keyword("map").append[oneSpace]
		mapping.regionFor.feature(XDsmlComposePackage.Literals.GTS_SPECIFICATION_MODULE_MEMBER__NAME).surround[oneSpace]
		
		mapping.blockIndent(document)
		
		mapping.regionFor.keyword("from").append[oneSpace]
		mapping.regionFor.keyword("to").append[oneSpace]
		
		mapping.source.format
		mapping.source.append[newLines = 2]
		
		mapping.target.format
		mapping.target.append[newLines = 2]
		
		mapping.typeMapping.format
		if (mapping.behaviourMapping !== null) {
			mapping.typeMapping.append[newLines = 2]
		}
		
		mapping.behaviourMapping.format
		
		mapping.regionFor.keyword("}").append[newLines = 2]
	}

	def dispatch void format(GTSSpecificationOrReference gts, extension IFormattableDocument document) { }
	def dispatch void format(GTSReference gts, extension IFormattableDocument document) { }

	def dispatch void format(GTSSpecification gts, extension IFormattableDocument document) {
		gts.regionFor.keyword("export").append[oneSpace]
		gts.regionFor.keyword("gts").append[oneSpace]
		gts.regionFor.feature(XDsmlComposePackage.Literals.GTS_SPECIFICATION_MODULE_MEMBER__NAME).surround[oneSpace]

		gts.regionFor.keyword("interface_of").append[oneSpace]

		gts.blockIndent(document)

		gts.gts.format
		
		// Top level GTS specifications are followed by a newline
		if (gts.eContainer instanceof GTSSpecificationModule) {
			gts.regionFor.keyword("}").append[newLines = 2]
		}
	}
	
	def dispatch void format(GTSLiteral gts, extension IFormattableDocument document) {
		gts.regionFor.keyword("metamodel").append[noSpace]
		gts.regionFor.keyword(":").append[oneSpace]
		gts.regionFor.keyword("behaviour").prepend[newLine].append[noSpace]
		gts.regionFor.feature(XDsmlComposePackage.Literals.GTS_LITERAL__BEHAVIOUR).prepend[oneSpace]
	}
	
	def dispatch void format(GTSFamilyChoice gts, extension IFormattableDocument document) {
		gts.regionFor.keyword("family").append[noSpace]
		gts.regionFor.keyword(":").append[oneSpace]
		gts.family.format
		
		gts.regionFor.keyword("using").prepend[newLines = 2].append[oneSpace]
		
		interior(
			gts.regionFor.keyword("[").append[newLine],
			gts.regionFor.keyword("]").prepend[newLine],
			[indent]
		)
		
		gts.transformationSteps.format
	}
	
	def dispatch void format(GTSFamilySpecification gts, extension IFormattableDocument document) {
		gts.regionFor.keyword("gts_family").append[oneSpace]
		gts.regionFor.feature(XDsmlComposePackage.Literals.GTS_SPECIFICATION_MODULE_MEMBER__NAME).surround[oneSpace]
		
		gts.regionFor.keyword("{").prepend[oneSpace]
		gts.blockIndent(document)
		gts.regionFor.keyword("}").append[newLines = 2]
		
		gts.root_gts.format
		
		gts.regionFor.keyword("transformers").prepend[newLines = 2].append[noSpace]
		gts.regionFor.keyword(":").append[oneSpace]
	}
	
	def dispatch void format(GTSWeave gts, extension IFormattableDocument document) {
		gts.regionFor.keyword("weave").surround[noSpace]
		gts.regionFor.keyword(GTSWeaveAccess.colonKeyword_1).append[oneSpace]
		gts.blockIndent(document)
		
		gts.regionFor.keyword("map1").surround[noSpace]
		gts.regionFor.keyword(GTSWeaveAccess.colonKeyword_4).append[oneSpace]
		gts.mapping1.format

		gts.regionFor.keyword("map2").surround[noSpace].prepend[newLine]
		gts.regionFor.keyword(GTSWeaveAccess.colonKeyword_7).append[oneSpace]
		gts.mapping2.format
	}
	
	def dispatch void format(GTSMappingRef gts, extension IFormattableDocument document) {
		gts.append[noSpace]
	}
	
	def dispatch void format(GTSMappingInterfaceSpec gts, extension IFormattableDocument document) {
		gts.regionFor.keyword("interface_of").append[noSpace]
		gts.regionFor.keyword("(").surround[noSpace]
		gts.regionFor.keyword(")").surround[noSpace]
	}

	def dispatch void format(UnitCallList ucl, extension IFormattableDocument document) {
		ucl.steps.forEach[s, idx |
			if (idx > 0) {
				s.prepend[newLine]
			}
			s.append[noSpace]
			s.format
		]
	}
	
	def dispatch void format(UnitCall uc, extension IFormattableDocument document) {
		uc.regionFor.keyword("(").prepend[oneSpace].append[noSpace]
		uc.regionFor.keyword(")").surround[noSpace]
		uc.params.format
	}
	
	def dispatch void format(UnitParameterList upl, extension IFormattableDocument document) {
		upl.parameters.forEach[p, idx |
			if (idx > 0) {
				p.prepend[oneSpace]
			}
			p.append[noSpace]
			p.format
		]
	}
	
	def dispatch void format(TypeGraphMapping mapping, extension IFormattableDocument document) {
		mapping.regionFor.keyword("type_mapping").append[oneSpace]
		mapping.blockIndent(document)
		mapping.mappings.forEach[m | 
			m.format
			m.append[newLine]
		]
	}
	
	def dispatch void format(TypeMapping mapping, extension IFormattableDocument document) {
		mapping.regionFor.keywords("class", "reference", "attribute").forEach[k | k.append[oneSpace]]
		mapping.regionFor.keyword("=>").surround[oneSpace]
	}
	
	def dispatch void format(BehaviourMapping mapping, extension IFormattableDocument document) {
		mapping.regionFor.keyword("behaviour_mapping").append[oneSpace]
		mapping.blockIndent(document)
		
		mapping.mappings.forEach[rm, idx | 
			rm.format
			if (idx > 0) {
				rm.prepend[newLines = 2]
			}
		]
	}
	
	def dispatch void format(RuleMapping mapping, extension IFormattableDocument document) {
		mapping.regionFor.keyword("rule").append[oneSpace]
		mapping.regionFor.keyword("empty").surround[oneSpace]
		mapping.regionFor.keyword("to").surround[oneSpace]
		mapping.regionFor.keyword("virtual").surround[oneSpace]
		mapping.regionFor.keyword("identity").surround[oneSpace]
		mapping.regionFor.keyword("{").prepend[oneSpace]
		mapping.blockIndent(document)
		
		mapping.element_mappings.forEach[em |
			em.format
			em.append[newLine]
		]
	}
	
	def dispatch void format(RuleElementMapping mapping, extension IFormattableDocument document) {
		mapping.regionFor.keywords("object", "link", "slot").forEach[k | k.append[oneSpace]]
		mapping.regionFor.keyword("=>").surround[oneSpace]
	}
	
	private def blockIndent(EObject object, extension IFormattableDocument document) {
		interior(
			object.regionFor.keyword("{").append[newLine],
			object.regionFor.keyword("}").prepend[newLine],
			[indent]
		)
	}
}
