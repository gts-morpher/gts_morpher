/*
 * generated by Xtext 2.12.0
 */
package uk.ac.kcl.inf.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.validation.CheckMode
import org.eclipse.xtext.validation.IResourceValidator
import uk.ac.kcl.inf.composer.XDsmlComposer
import uk.ac.kcl.inf.util.IProgressMonitor
import uk.ac.kcl.inf.xDsmlCompose.GTSSpecification
import uk.ac.kcl.inf.xDsmlCompose.GTSSpecificationModule
import uk.ac.kcl.inf.xDsmlCompose.GTSWeave

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class XDsmlComposeGenerator extends AbstractGenerator {

	@Inject
	extension XDsmlComposer composer
	
	@Inject
	extension IResourceValidator resourceValidator	

	/**
	 * Generate all composed GTSs
	 */
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val monitor = IProgressMonitor.wrapCancelIndicator(context.cancelIndicator)
		val _monitor = monitor.convert(2)
		try {
			val issues = resource.validate(CheckMode.ALL, _monitor.split("Validating resource.", 1))

			if (issues.empty) {
				val gtsModule = resource.contents.head as GTSSpecificationModule

				// TODO: Also do family choices, not just weaves
				gtsModule.gtss.filter[gts | gts.export].map[it.gts].filter(GTSWeave).map[weave |
					new Pair((weave.eContainer as GTSSpecification).name, weave.doCompose(_monitor.split("Composing", 1)))
				].forEach[p |
					val weaveResult = p.value
					val name = p.key
	
					if (weaveResult.a.empty) {
						if (weaveResult.b !== null) {
							weaveResult.b.saveModel(fsa, resource, name, "tg.ecore")						
						}
						if (weaveResult.c !== null) {
							weaveResult.c.saveModel(fsa, resource, name, "rules.henshin")
						}						
					}
				]
			}
		} catch (Exception e) {
			e.printStackTrace
		}
	}
	
	private def void saveModel(EObject model, IFileSystemAccess2 fsa, Resource baseResource, String gtsName, String fileName) {
		val composedTGResource = baseResource.resourceSet.createResource(
			fsa.getURI(gtsName + "/" + fileName))
		composedTGResource.contents.clear
		composedTGResource.contents.add(model)
		composedTGResource.save(emptyMap)
	}
}
