/*
 * generated by Xtext 2.12.0
 */
package uk.ac.kcl.inf.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.inf.util.ValueHolder
import uk.ac.kcl.inf.xDsmlCompose.GTSFamilyChoice
import uk.ac.kcl.inf.xDsmlCompose.GTSLiteral
import uk.ac.kcl.inf.xDsmlCompose.GTSMapping
import uk.ac.kcl.inf.xDsmlCompose.GTSSpecification

import static extension uk.ac.kcl.inf.util.MappingConverter.extractGTSMapping
import static extension uk.ac.kcl.inf.util.MorphismCompleter.createMorphismCompleter

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class XDsmlComposeGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val mapping = resource.allContents.head as GTSMapping
		if (mapping.autoComplete) {
			val completedMappings = mapping.completedMappings
			val idx = new ValueHolder<Integer>(0)

			completedMappings.forEach [ mp |
				val uri = fsa.getURI(resource.URI.trimFileExtension.lastSegment + idx.value + '.complete.lang_compose')
				var saveRes = resource.resourceSet.getResource(uri, false)
				if (saveRes === null) {
					saveRes = resource.resourceSet.createResource(uri)
				} else {
					saveRes.contents.clear
				}
				mp.extractGTSMapping(mapping.source, mapping.target, saveRes)
				saveRes.save(emptyMap)
				idx.value = idx.value + 1
			]
		}
	}

	private dispatch def String generate(GTSSpecification spec) '''
		«if (spec.interface_mapping) '''interface_of '''»{
			«spec.gts.generate»
		}
	'''

	private dispatch def String generate(GTSLiteral gts) '''
		metamodel: "«gts.metamodel.name»"
		«if (gts.behaviour !== null) '''behaviour: "«gts.behaviour.name»"'''»
	'''

	private dispatch def String generate(GTSFamilyChoice gts) '''
		family: {
			«gts.root.generate»
			
			transformers: "«gts.transformers.name»"
		}
		
		using [
			«gts.transformationSteps.generate»
		]
	'''

	private static def getCompletedMappings(GTSMapping mapping) {
		val completer = mapping.createMorphismCompleter

		if (completer.findMorphismCompletions(true) == 0) {
			// Found morphism(s)
			completer.completedMappings
		} else {
			// We have a problem
			#[]
		}
	}
}
